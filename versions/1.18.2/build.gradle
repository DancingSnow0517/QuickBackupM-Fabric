apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'

int mcVersion = 1

ext {
    getVersionSuffix = {
        String versionSuffix = ''
        if (System.getenv("BUILD_RELEASE") != "true") {
            def PRE_VERSION = System.getenv("PRE_VERSION")
            if (PRE_VERSION != null && PRE_VERSION != "" && PRE_VERSION != "null") {
                versionSuffix += ("+pre-release." + PRE_VERSION)
            } else {
                String buildNumber = System.getenv("BUILD_ID")
                versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '+SNAPSHOT'
            }
        }
        return versionSuffix
    }
}

preprocess {
    mcVersion = vars.get()["MC"] as int
    tabIndentation = true
}

configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

repositories {
    mavenLocal()
    maven {
        name 'aliyunMavenCentralMirror'
        url 'https://maven.aliyun.com/repository/central'
    }
    maven {
        name 'mavenCentral'
        url 'https://repo1.maven.org/maven2/'
    }
    maven {
        name 'CjsahMaven'
        url 'https://server.cjsah.net:1002/maven/'
    }
}

loom {
    accessWidenerPath = file("qbm.accesswidener")
}

remapJar {
    remapperIsolation = true
}

JavaVersion SOURCE_JAVA_VERSION
JavaVersion TARGET_JAVA_VERSION
if (mcVersion >= 12005) {
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_21
    TARGET_JAVA_VERSION = JavaVersion.VERSION_21
} else if (mcVersion >= 11800){
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_17
    TARGET_JAVA_VERSION = JavaVersion.VERSION_17
}  else if (mcVersion >= 11700) {
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_16
    TARGET_JAVA_VERSION = JavaVersion.VERSION_16
} else {
    SOURCE_JAVA_VERSION = JavaVersion.VERSION_1_8
    TARGET_JAVA_VERSION = JavaVersion.VERSION_17
}
JavaVersion MIXIN_COMPATIBILITY_LEVEL = TARGET_JAVA_VERSION

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation('commons-io:commons-io:2.15.1')

    include(implementation('org.yaml:snakeyaml:2.0'))

    include(implementation('io.github.skydynamic:incremental-storage-lib:1.0.7'))

    include(implementation('org.quartz-scheduler:quartz:2.3.2'))

    include(implementation('dev.morphia.morphia:morphia-core:2.3.9'))
    include(implementation('de.bwaldvogel:mongo-java-server:1.45.0'))
    include(implementation('de.bwaldvogel:mongo-java-server-core:1.45.0'))
    include(implementation('de.bwaldvogel:mongo-java-server-h2-backend:1.45.0'))
    include(implementation('org.mongodb:mongodb-driver-sync:4.11.1'))
    include(implementation('org.mongodb:mongodb-driver-core:4.11.1'))
    include(implementation('org.mongodb:bson:4.11.1'))
    include(implementation('com.h2database:h2:2.2.224'))
    include(implementation('org.lz4:lz4-java:1.8.0'))

}

String versionSuffix = project.getVersionSuffix()

String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.maven_group
archivesBaseName = project.archives_base_name + '-mc' + project.minecraft_version

String fabric_id = "fabric-api"
if (mcVersion < 11800) {
    fabric_id = "fabric"
}

processResources {
    from "qbm.accesswidener"

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "version"          : fullModVersion,
                "id"               : project.mod_id,
                "name"             : project.archives_base_name,
                "minecraft_support": project.minecraft_support_version,
                "fabric_loader"    : project.loader_version,
                "fabric_api_id"    : fabric_id
        ]
        expand valueMap
    }

    filesMatching("quickbackupmulti.mixins.json") {
        filter {
            text -> text.replace("/*JAVA_VERSION*/", "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}")
        }
    }
}

java {
    withSourcesJar()
    sourceCompatibility = SOURCE_JAVA_VERSION
    targetCompatibility = TARGET_JAVA_VERSION
}

jar {
    from "LICENSE"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}